"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = generate;

var _fs = require("fs");

var _path = _interopRequireDefault(require("path"));

var _metalsmith = _interopRequireDefault(require("metalsmith"));

var _consolidate = _interopRequireDefault(require("consolidate"));

var _ask = _interopRequireDefault(require("./ask"));

var _filter = _interopRequireDefault(require("./filter"));

var _renderFiles = _interopRequireDefault(require("./render-files"));

var _gitUser = _interopRequireDefault(require("./git-user"));

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

const render = _consolidate.default.handlebars.render;

function getMetaData(name, dir) {
  let data = {
    prompts: {},
    completeMessage: ''
  };

  const json = _path.default.join(dir, 'meta.json');

  if ((0, _fs.existsSync)(json)) {
    data = require(json);
  }

  setDefaultPromptVal(data, 'name', name);
  const author = (0, _gitUser.default)();

  if (author) {
    setDefaultPromptVal(data, 'author', author);
  }

  return data;
}

function setDefaultPromptVal(opts, key, value) {
  const prompts = opts.prompts || (opts.prompts = {});

  if (!prompts[key] || typeof prompts[key] !== 'object') {
    prompts[key] = {
      type: 'string',
      label: key,
      default: value
    };
  } else {
    prompts[key].default = value;
  }
}
/**
 * 
 * @param name 生成的项目名
 * @param src 原文件路径
 * @param dest 生成的目标路径
 * @param done 回调
 */


async function generate(name, src, dest, done) {
  const metalsmith = (0, _metalsmith.default)(_path.default.join(src, 'template'));
  const options = getMetaData(name, src);
  const metaData = metalsmith.metadata();
  Object.assign(metaData, {
    destDirName: name
  });
  metalsmith.use(askQuestions(options.prompts)).use(filterFiles(options.filters)).use(renderTemplateFiles(options.skipInterpolation));
  metalsmith.clean(false).destination(dest).source('.') // start from template root instead of `./src`
  .build((err, files) => {
    done(err);

    if (typeof options.complete === 'function') {
      options.complete(metaData);
    } else {
      logMessage(options.completeMessage, metaData);
    }
  });
}

function filterFiles(filters) {
  return function (files, metalsmith, done) {
    (0, _filter.default)(filters, files, metalsmith.metadata(), done);
  };
}

function askQuestions(promps) {
  return function (files, metalsmith, done) {
    (0, _ask.default)(promps, metalsmith.metadata(), done);
  };
}

function renderTemplateFiles(skipInterpolation) {
  skipInterpolation = typeof skipInterpolation === 'string' ? [skipInterpolation] : skipInterpolation;
  return function (files, metalsmith, done) {
    (0, _renderFiles.default)(skipInterpolation, files, metalsmith.metadata(), done);
  };
}
/**
 * Display template complete message.
 *
 * @param {String} message
 * @param {Object} data
 */


function logMessage(message, data) {
  if (!message) return;
  render(message, data, (err, res) => {
    if (err) {
      console.error('\n   Error when rendering template complete message: ' + err.message.trim());
    } else {
      console.log('\n' + res.split(/\r?\n/g).map(line => '   ' + line).join('\n'));
    }
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,